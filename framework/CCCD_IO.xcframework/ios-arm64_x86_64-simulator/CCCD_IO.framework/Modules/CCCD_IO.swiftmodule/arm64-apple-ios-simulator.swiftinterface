// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CCCD_IO
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
@_exported import CCCD_IO
import CoreGraphics
import Foundation
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import os
public enum MRZResult {
  case genericDocument(CCCD_IO.MRZResult.GenericDocument)
}
extension CCCD_IO.MRZResult {
  public struct GenericDocument {
    public let documentType: Swift.String
    public let countryCode: Swift.String
    public let surnames: Swift.String
    public let givenNames: Swift.String
    public let documentNumber: Swift.String
    public let nationalityCountryCode: Swift.String
    public let birthdate: Foundation.Date?
    public let sex: Swift.String?
    public let expiryDate: Foundation.Date?
    public let personalNumber: Swift.String
    public let personalNumber2: Swift.String?
    public let isDocumentNumberValid: Swift.Bool
    public let isBirthdateValid: Swift.Bool
    public let isExpiryDateValid: Swift.Bool
    public let isPersonalNumberValid: Swift.Bool?
    public let allCheckDigitsValid: Swift.Bool
  }
}
@objc public enum CCCDError : Swift.Int, Swift.Error {
  case userCancelled = 0
  case cameraPermission = 1
  case cameraUnavailable = 2
  case invalidImageData = 3
  case writeToDisk = 4
  case http = 5
  case versionInsufficient = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public typealias CCCDCompletionHandler = (_ response: CCCD_IO.CCCDResponse) -> Swift.Void
public typealias CCCDTokenExpirationHandler = (@escaping (Swift.String) -> Swift.Void) -> Swift.Void
@objc @objcMembers public class CCCDConfig : ObjectiveC.NSObject {
  @objc final public let token: Swift.String
  @objc final public let workflowRunID: Swift.String
  @objc public init(workflowRunID: Swift.String, token: Swift.String, tokenExpirationHandler: CCCD_IO.CCCDTokenExpirationHandler?)
  @objc public init(workflowRunID: Swift.String, token: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CCCDResponse : ObjectiveC.NSObject {
  @objc public var error: Swift.Error? {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CCCDViewController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public static var logger: (Swift.String) -> Swift.Void
  @objc @_Concurrency.MainActor(unsafe) public var cccdConfig: CCCD_IO.CCCDConfig?
  @objc @_Concurrency.MainActor(unsafe) public func setCCCDCompletionHandler(_ handler: @escaping CCCD_IO.CCCDCompletionHandler)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CCCD_IO.CCCDError : Swift.Equatable {}
extension CCCD_IO.CCCDError : Swift.Hashable {}
extension CCCD_IO.CCCDError : Swift.RawRepresentable {}
